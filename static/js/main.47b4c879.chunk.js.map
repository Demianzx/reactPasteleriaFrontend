{"version":3,"sources":["components/About.js","components/Pasteles.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["About","API","process","Pasteles","useState","sabor","setSabor","precio","setPrecio","tamano","setTamano","editing","setEditng","id","setId","pasteles","setPasteles","handleSubmit","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","resp","json","data","console","log","res","getUsers","useEffect","borrarPastel","window","confirm","editarPastel","className","onSubmit","type","onChange","target","value","placeholder","autoFocus","map","pastel","key","_id","onClick","Navbar","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47b4c879.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const About = () => (\r\n    <h1>Sobre</h1>\r\n    \r\n)","import React, {useState,useEffect} from 'react'\r\n\r\nconst API = process.env.REACT_APP_PASTELES;\r\n\r\nexport const Pasteles = () => {\r\n\r\n    const[sabor,setSabor] = useState('')\r\n    const[precio,setPrecio] = useState('')\r\n    const[tamano,setTamano] = useState('')\r\n\r\n    const[editing,setEditng]= useState(false)\r\n    const[id,setId]= useState('')\r\n\r\n    const [pasteles,setPasteles]=useState([])\r\n\r\n    const handleSubmit = async (e) =>{\r\n        e.preventDefault()\r\n\r\n        if (!editing){    \r\n            const resp = await fetch(`${API}`, {\r\n                method: 'POST',\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    sabor,\r\n                    precio,\r\n                    tamano\r\n                })\r\n            })\r\n            const data = await resp.json();\r\n            console.log(data)\r\n        }else {\r\n            const res = await fetch(`${API}/${id}`, {\r\n                method: 'PUT',\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    sabor,\r\n                    precio,\r\n                    tamano\r\n                })\r\n            })\r\n            const data = await res.json();\r\n            console.log(data)\r\n            setEditng(false);\r\n            setId('')\r\n        }\r\n\r\n\r\n        await getUsers();\r\n        setSabor('');\r\n        setPrecio('');\r\n        setTamano('');\r\n    }\r\n\r\n    const getUsers = async () =>{\r\n        const res = await fetch(`${API}`)\r\n        const data = await res.json();\r\n        setPasteles(data)\r\n    }\r\n\r\n    useEffect(() =>{\r\n        getUsers()\r\n    },[])\r\n\r\n    const borrarPastel= async (id)=>{\r\n       const userResponse = window.confirm('Estas seguro de eliminar el pastel?')\r\n       if (userResponse){\r\n        const res = await fetch(`${API}/${id}`, {\r\n            method:'DELETE'\r\n            })\r\n        const data = await res.json();\r\n        console.log(data)\r\n        await getUsers();\r\n       }\r\n    }\r\n\r\n\r\n    const editarPastel=async(id)=>{\r\n        const res = await fetch(`${API}/${id}`)\r\n        const data = await res.json();\r\n\r\n        setEditng(true);\r\n        setId(id)\r\n\r\n        setSabor(data.sabor)\r\n        setPrecio(data.precio)\r\n        setTamano(data.tamano)\r\n        console.log(data)\r\n        \r\n    }\r\n\r\n    return(\r\n        <div className=\"row\">\r\n            <div className=\"col-md-4\" > \r\n                <form onSubmit={handleSubmit} className=\"card card-body\">\r\n                    <div className=\"form-group\">\r\n                      <input \r\n                        type=\"text\" \r\n                        onChange={e => setSabor(e.target.value)} \r\n                        value = {sabor}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Sabor\"\r\n                        autoFocus/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <input \r\n                        type=\"number\" \r\n                        onChange={e => setPrecio(e.target.value)} \r\n                        value= {precio}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Precio\"\r\n                        autoFocus/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <input \r\n                        type=\"text\" \r\n                        onChange={e => setTamano(e.target.value)} \r\n                        value= {tamano}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Tamaño\"\r\n                        autoFocus/>\r\n                    </div>\r\n                    <button className=\"btn btn-primary\">\r\n                        {editing ?  'Editar': 'Crear'}\r\n                    </button>\r\n\r\n                </form>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n                <table className=\"table table-striped\">\r\n                    <thead>\r\n                         <tr>\r\n                         <th>Sabor</th>\r\n                         <th>Precio</th>\r\n                         <th>Tamaño</th>\r\n                         <th>Operaciones</th>\r\n                         </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {pasteles.map(pastel =>(\r\n                        <tr key={pastel._id}>\r\n                            <td>{pastel.sabor}</td>\r\n                            <td>${pastel.precio}</td>\r\n                            <td>{pastel.tamano}</td>\r\n                            <td>\r\n                                <button \r\n                                className=\"btn btn-secondary btn-sm btn-block\"\r\n                                onClick={e=> editarPastel(pastel._id)}\r\n                                >\r\n                                    Editar\r\n                                </button>\r\n                                <button \r\n                                className=\"btn btn-danger btn-sm btn-block\"\r\n                                onClick={()=>borrarPastel(pastel._id)}\r\n                                >\r\n                                    Borrar\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport const Navbar = () => (\r\n<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <Link className=\"navbar-brand\" to=\"/\">Pasteleria</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item active\">\r\n              <Link className=\"nav-link\" to=\"/about\">About <span className=\"sr-only\">(current)</span></Link>\r\n            </li>            \r\n          </ul>\r\n        </div>\r\n</nav>\r\n)","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\n\nimport  {About} from './components/About'\nimport {Pasteles} from './components/Pasteles'\nimport { Navbar } from \"./components/Navbar\";\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar/>\n      <div className= \"container p-2\">\n        <Switch>\n          <Route path= \"/about\" component={About}/>\n          <Route path= \"/\" component= {Pasteles}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootswatch/dist/lux/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}